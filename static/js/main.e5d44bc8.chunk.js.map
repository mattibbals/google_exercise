{"version":3,"sources":["components/charts/multilinechart/component.tsx","components/charts/multilinechart/drawChart.ts","parser/transform.ts","components/header/page.tsx","components/table/component.tsx","components/table/drawTable.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MultiLineChart","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","dateFormat","height","legendAxisY","uriPath","d3","then","data","heightUser","fields","keys","objKey","objX","objY","dataGroup","d","entries","margins","top","right","bottom","left","width","parseInt","style","svg","attr","xScale","yScale","xRange","yRange","domain","range","xAxis","yAxis","parseTime","lineGen","x","y","div","append","resize","select","forEach","i","dataVals","values","pathData","dataX","dataY","dataObjKey","length","selectAll","on","console","log","html","pageX","pageY","ticks","Math","max","text","j","enter","window","setTimeout","drawChart","formatDate","result","index","push","columnKey","date","Date","jsonTransform","catch","err","warn","react","id","React","Header","className","title","Table","new_data","Array","objectSpread","columns","table","thead","tbody","toString","row","map","column","tabulate","App","base_URL","data_sources","data_file","legend","date_format","page_Header","component_MultiLineChart","component_Table","Boolean","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5d44bc8.chunk.js","sourcesContent":["import * as React from 'react';\nimport * as d3 from 'd3';\nimport { ScaleTime, ScaleLinear, ScaleOrdinal, Line, Selection, DSVRowString, Axis } from 'd3';\nimport { drawChart } from './drawChart';\nimport { jsonTransform } from '../../../parser/transform';\nimport { number } from 'prop-types';\n\ninterface Props {\n    tsvPath?: string;\n    uriPath?: string;\n    csvPath?: string;\n    dateFormat?: string;\n    height?: string\n    legendAxisY: string;\n}\n\nexport class MultiLineChart extends React.Component<Props, {}> {\n    constructor(props : any) {\n        super(props);\n    }\n    componentDidMount() {\n        const dateFormat : any = this.props.dateFormat;\n        const height : any = this.props.height;\n        const legendAxisY = this.props.legendAxisY;\n        \n        if (this.props.uriPath !== void(0)) {\n\n            d3.json(this.props.uriPath)\n                .then((data) => {\n                    const dataTransformed : any = jsonTransform(data, dateFormat);\n                    drawChart(dataTransformed, legendAxisY, height, dateFormat); \n                })\n                .catch((err) => {\n                    return console.warn(err);\n                });\n        } \n    }\n    render() {\n        return (\n            <svg id=\"chart\"></svg>\n        );\n    }\n}","import * as d3 from 'd3';\nimport { ScaleTime, ScaleLinear, ScaleOrdinal, Line, Selection, DSVRowString, Axis } from 'd3';\n\nexport const drawChart = (data : any, legendAxisY : string, heightUser : number, dateFormat : string) => {\n    // Data\n    const fields: any = Object.keys(data[0]);\n    const objKey : string = fields[0];\n    const objX : number = fields[1];\n    const objY : number = fields[2];\n\n    const dataGroup: any = d3.nest().key((d : any) => d[objKey]).entries(data);\n\n    // Margins\n    const margins = { top: 20, right: 80, bottom: 30, left: 50 };\n    let width = parseInt(d3.select(\"#chart\").style(\"width\")) - margins.left - margins.right;\n    let height : number = heightUser - margins.top - margins.bottom;\n\n    const svg: Selection<Element, {}, HTMLElement, any> = d3.select(\"#chart\");\n    svg.attr(\"height\", height);\n\n    // Scales, domain and axis\n    const xScale: ScaleTime<number, number> = d3.scaleTime();\n    const yScale: ScaleLinear<number, number> = d3.scaleLinear();\n    const xRange: any = d3.extent( data, (d : any) => +d[objX] );\n    const yRange: any = d3.extent( data, (d : any) => +d[objY] );\n    xScale.domain( xRange  );\n    yScale.domain( yRange  );\n\n\n    xScale.range([margins.left, width]);\n    yScale.range([height - margins.bottom, margins.top]);\n    const xAxis: any = d3.axisBottom(xScale);\n    const yAxis: any = d3.axisLeft(yScale);\n\n    const parseTime = d3.timeFormat(dateFormat);\n    // Lines\n    const lineGen: Line<[number, number]> = d3.line().x((d) => xScale(d[objX])).y((d) => yScale(d[objY]));\n\n    // Define the div for the tooltip\n    const div = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 0);\n    svg.append(\"svg:g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + (height - margins.bottom) + \")\")\n        .call(xAxis) // Drawing axis X\n    svg.append(\"svg:g\")\n        .attr(\"class\", \"y axis\")\n        .attr(\"transform\", \"translate(\" + (margins.left) + \",0)\")\n        .call(yAxis) // Drawing axis Y\n        .append(\"text\") \n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"fill\", \"#000\")\n        .attr(\"y\", 10)\n        .text(legendAxisY); // Text column Y\n    dataGroup.forEach((d : any, i : any) => {\n        const dataVals : any = d.values;\n        const pathData: any = lineGen(dataVals);\n        const dataX: any = d[objX];\n        const dataY: any = d[objY];\n        svg.append('svg:path')\n            .attr(\"class\", \"line\" + i)\n            .attr('d', pathData ) // Drawing line\n            .attr('stroke', (d, j) => \"hsl(\" + i * 50 % 360 + \",100%,50%)\")  // Setting color\n            .attr('stroke-width', 2)\n            .attr('fill', 'none');\n        svg.append('svg:text')\n            .attr(\"class\", \"textKey\" + i)\n            .attr(\"transform\", \"translate(\" + xScale(dataVals[dataVals.length - 1][objX]) + \",\" + yScale(dataVals[dataVals.length - 1][objY]) + \")\")\n            .style(\"font\", \"10px sans-serif\")\n            .text(d.key); // Showing data keys\n        // Add the scatterplot\n        svg.selectAll(\"dot\")\n            .data(d.values)\n            .enter().append(\"circle\")\n            .attr(\"r\", 5)\n            .attr(\"class\", \"circle\")\n            .attr(\"opacity\",0)\n            .attr(\"cx\", (d) => xScale( dataX ))\n            .attr(\"cy\", (d) => yScale( dataY ))\n            .on(\"mouseover\", (d) => {\n                div.style(\"opacity\", 0.8);\n                div.html(\"<b>Date: </b>\" + parseTime(dataX) + \"<br/><b>\" + legendAxisY + \":</b> \" + dataY)\n                    .style(\"left\", (d3.event.pageX) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n            .on(\"mouseout\", (d) => {\n                div.style(\"opacity\", 0);\n            });\n    });\n\n    // Responsive behavior\n    function resize() {\n        width = parseInt(d3.select(\"#chart\").style(\"width\")) - margins.left - margins.right;\n        height = heightUser - margins.top - margins.bottom;\n\n        // Update the range of the scale with new width/height\n        xScale.range([margins.left, width]);\n        yScale.range([height - margins.bottom, margins.top]);\n\n        // Update the axis and text with the new scale\n        svg.select('.x.axis')\n            .attr(\"transform\", \"translate(0,\" + (height - margins.bottom) + \")\")\n            .call(xAxis);\n        svg.select('.y.axis')\n            .call(yAxis);\n\n        // Force D3 to recalculate and update the line and text keys\n        dataGroup.forEach((d : any, i : any) => {\n            const dataVals : any = d.values;\n            const pathData: any = lineGen(dataVals);\n            const dataX: any = d[objX];\n            const dataY: any = d[objY];\n            const dataObjKey: any = d[objKey];\n            svg.select('.line' + i)\n                .attr('d', pathData);\n            svg.select(\".textKey\" + i)\n                .attr(\"transform\", \"translate(\" + xScale(d.values[d.values.length - 1][objX]) + \",\" + yScale(d.values[d.values.length - 1][objY]) + \")\");\n\n            // Add the scatterplot\n            svg.selectAll(\".circle\")\n                .attr(\"cx\", (d : any) => xScale(dataX))\n                .attr(\"cy\", (d : any) => yScale(dataY))\n                .on(\"mouseover\", (d : any) => {\n                    console.log('here');\n                    div.style(\"opacity\", .8);\n                    div.html(\"<b>\"+dataObjKey+\"</b><br/><b>Date: </b>\" + parseTime(dataX) + \"<br/><b>\" + legendAxisY + \":</b> \" + dataY)\n                        .style(\"left\", (d3.event.pageX) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n                })\n                .on(\"mouseout\", (d) => {\n                    div.style(\"opacity\", 0);\n                });\n        });\n\n        // Update the tick marks\n        xAxis.ticks(Math.max(width / 75, 2));\n        yAxis.ticks(Math.max(height / 50, 2));\n\n    };\n\n    // Call the resize function whenever a resize event occurs\n    d3.select(window).on('resize', resize);\n\n    // Call the resize function\n    setTimeout(function(){ resize(); }, 3);\n    //resize();\n    \n}","import * as d3 from 'd3';\n\nexport const jsonTransform = (data : any, formatDate : any) => {\n    const parseTime = d3.timeParse(formatDate);\n    let result : any = [];\n    data.forEach((d : any) => {\n        Object.keys(d).forEach(function(key,index) {\n            if (key !== 'Date') {\n                if (d[key] !== null) {\n                    result.push({\n                        columnKey: key,\n                        date: parseTime(d.Date),\n                        value: d[key]\n                    });\n                }\n            }\n        });\n    });\n    return result;\n}\n","import * as React from 'react';\n\ninterface Props {\n    title: string;\n}\n\nexport const Header = (props: Props) => (\n    <div className=\"well text-center\">\n        <h1>{props.title}</h1>\n    </div>\n);","import * as React from 'react';\nimport * as d3 from 'd3';\nimport { tabulate } from './drawTable';\n\ninterface Props {\n    tsvPath?: string;\n    csvPath?: string;\n    uriPath?: string;\n}\n\nexport class Table extends React.Component<Props, {}> {\n    constructor(props: any) {\n        super(props);\n    }\n    componentDidMount() {\n\n        if (this.props.uriPath !== void(0)) {\n\n\n            d3.json(this.props.uriPath)\n                .then((data) => {\n                    let new_data : any = [];\n                    if (data instanceof Array) {\n                        data.forEach((d) => {\n                            new_data.push({\n                                Date : d.Date,\n                                ...d\n                            });\n                        });\n                    }\n                    const columns = Object.keys(new_data[0]);\n                    tabulate(new_data, columns); \n                })\n                .catch((err) => {\n                    return console.warn(err);\n                });\n        } \n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"jumbotron\">\n                    <div id=\"tableComponent\" className=\"table-responsive\"></div>\n                </div>\n            </div>\n        );\n    }\n}","import * as d3 from 'd3';\n\ninterface RowTable {\n    column: string;\n    value: string;\n}\n\n\nexport const tabulate = (data : any, columns : any) => {\n    const table = d3.select('#tableComponent').append('table').attr(\"class\", \"table text-center\");\n    const thead = table.append('thead');\n    const tbody = table.append('tbody');\n\n    thead.append('tr').attr(\"class\", \"text-center\")\n        .selectAll('th')\n        .data(columns)\n        .enter()\n        .append('th')\n        .text(function (d) { return d.toString() })\n\n    const rows = tbody.selectAll('tr')\n        .data(data)\n        .enter()\n        .append('tr')\n\n    const cells = rows.selectAll('td')\n        .data(function (row : any) {\n            return columns.map(function (column : any): RowTable {\n                return { column: column, value: row[column] }\n            })\n        })\n        .enter()\n        .append('td')\n        .text( function (d: any) { return d.value } )\n\n    return table;\n}\n","import * as React from 'react';\nimport { MultiLineChart } from './components/charts/multilinechart/component'\nimport { Header } from './components/header/page';\nimport { Table } from './components/table/component';\n\n\n\nconst App: React.StatelessComponent = () => { \n\n  const base_URL = '//storage.googleapis.com/gweb-dat-coding-challenge-data-sources/';\n  const data_files = [\n    'us_house_price_idx.json',\n    'global_co2_emissions_from_fossil_fuels.json',\n    'us_employment_and_unemployment_rates.json',\n    'corruptions_perceptions_index.json',\n    'global_historical_population.json',\n    'global_temp_time_series_annual.json',\n    'global_temp_time_series_monthly.json',\n    'pharmaceutical_drug_spending_by_counties.json'\n  ];\n  const data_sources = [\n    {\n      data_file: 'us_house_price_idx.json',\n      legend: 'US House Price Index',\n      date_format: '%Y-%m-%d'\n    },\n    {\n      data_file: 'global_co2_emissions_from_fossil_fuels.json',\n      legend: 'Global CO2 Emissions from Fossil Fuel',\n      date_format: '%Y'\n    }\n  ];\n  const report_idx = 0;\n\n\n  return (\n    <div>\n      <Header title={data_sources[report_idx].legend} />\n      <MultiLineChart uriPath={ base_URL + data_sources[report_idx].data_file } dateFormat={ data_sources[report_idx].date_format } height=\"800\" legendAxisY={ data_sources[report_idx].legend }/>\n      <br/>\n      <Table uriPath={ base_URL + data_sources[report_idx].data_file } />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/site.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}